/**
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { OrderBilling } from './orderBilling';
import { OrderIdentifiers } from './orderIdentifiers';
import { OrderMetaInfoValue } from './orderMetaInfoValue';
import { OrderProductsInner } from './orderProductsInner';

export class Order {
    /**
    * Unique ID of the order.
    */
    'id': string;
    /**
    * Event occurrence UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when order is actually created.
    */
    'createdAt': string;
    /**
    * Event updated UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when the status of the order is actually changed/updated.
    */
    'updatedAt': string;
    /**
    * State of the order.
    */
    'status': string;
    /**
    * Total amount of the order, including all shipping expenses, tax and the price of items.
    */
    'amount': number;
    /**
    * ID of store where the order is placed
    */
    'storeId'?: string;
    'identifiers'?: OrderIdentifiers;
    'products': Array<OrderProductsInner>;
    'billing'?: OrderBilling;
    /**
    * Coupons applied to the order. Stored case insensitive.
    */
    'coupons'?: Array<string>;
    /**
    * Meta data of order to store additional detal such as custom message, customer type, source.
    */
    'metaInfo'?: { [key: string]: OrderMetaInfoValue; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "storeId",
            "baseName": "storeId",
            "type": "string"
        },
        {
            "name": "identifiers",
            "baseName": "identifiers",
            "type": "OrderIdentifiers"
        },
        {
            "name": "products",
            "baseName": "products",
            "type": "Array<OrderProductsInner>"
        },
        {
            "name": "billing",
            "baseName": "billing",
            "type": "OrderBilling"
        },
        {
            "name": "coupons",
            "baseName": "coupons",
            "type": "Array<string>"
        },
        {
            "name": "metaInfo",
            "baseName": "metaInfo",
            "type": "{ [key: string]: OrderMetaInfoValue; }"
        }    ];

    static getAttributeTypeMap() {
        return Order.attributeTypeMap;
    }
}

