/**
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ConversationsMessageAttachmentsInner } from './conversationsMessageAttachmentsInner';
import { ConversationsMessageFile } from './conversationsMessageFile';
import { ConversationsMessageForwardedToSourceStatus } from './conversationsMessageForwardedToSourceStatus';
import { ConversationsMessageFrom } from './conversationsMessageFrom';
import { ConversationsMessageReplyTo } from './conversationsMessageReplyTo';
import { ConversationsMessageToInner } from './conversationsMessageToInner';

/**
* a Conversations message
*/
export class ConversationsMessage {
    /**
    * Message ID. It can be used for further manipulations with the message.
    */
    'id'?: string;
    /**
    * `\"agent\"` for agents’ messages, `\"visitor\"` for visitors’ messages.
    */
    'type'?: ConversationsMessage.TypeEnum;
    /**
    * Message text or name of the attached file
    */
    'text'?: string;
    /**
    * The subject line of the email message (only for messages sent to email threads).
    */
    'subject'?: string;
    /**
    * visitor’s ID
    */
    'visitorId'?: string;
    /**
    * ID of the agent on whose behalf the message was sent (only in messages sent by an agent).
    */
    'agentId'?: string;
    /**
    * Agent’s name as displayed to the visitor. Only in the messages sent by an agent.
    */
    'agentName'?: string;
    /**
    * Timestamp in milliseconds.
    */
    'createdAt'?: number;
    /**
    * `true` for pushed messages
    */
    'isPushed'?: boolean;
    /**
    * `true` for automatic messages from “Targeted chats & triggers” and API (https://developers.brevo.com/docs/javascript-api-reference#sendautomessage)
    */
    'isTrigger'?: boolean;
    /**
    * `true` for missed and offline messages.
    */
    'isMissed'?: boolean;
    /**
    * `true` for unread agent’s messages in finished chats.
    */
    'isMissedByVisitor'?: boolean;
    /**
    * Only set if the agent has uploaded a profile picture.
    */
    'agentUserpic'?: string;
    /**
    * In two-way integrations, messages sent via REST API can be marked with receivedFrom property and then filtered out when received in a webhook to avoid infinite loop.
    */
    'receivedFrom'?: string;
    'file'?: ConversationsMessageFile;
    'from'?: ConversationsMessageFrom;
    /**
    * An array containing details of the recipients (applicable only to messages in email threads).
    */
    'to'?: Array<ConversationsMessageToInner>;
    'replyTo'?: ConversationsMessageReplyTo;
    /**
    * An array containing details of the carbon copy (CC) recipients (applicable only to messages in email threads).
    */
    'cc'?: Array<ConversationsMessageToInner>;
    /**
    * An array containing details of the blind carbon copy (BCC) recipients (applicable only to messages in email threads).
    */
    'bcc'?: Array<ConversationsMessageToInner>;
    /**
    * The ID of the message assigned by the integration source.
    */
    'sourceMessageId'?: string;
    'forwardedToSourceStatus'?: ConversationsMessageForwardedToSourceStatus;
    /**
    * Integration details.
    */
    'integrations'?: object;
    /**
    * `true` for automated messages generated by an AI bot.
    */
    'isBot'?: boolean;
    /**
    * An array of file attachments.
    */
    'attachments'?: Array<ConversationsMessageAttachmentsInner>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ConversationsMessage.TypeEnum"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "visitorId",
            "baseName": "visitorId",
            "type": "string"
        },
        {
            "name": "agentId",
            "baseName": "agentId",
            "type": "string"
        },
        {
            "name": "agentName",
            "baseName": "agentName",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "number"
        },
        {
            "name": "isPushed",
            "baseName": "isPushed",
            "type": "boolean"
        },
        {
            "name": "isTrigger",
            "baseName": "isTrigger",
            "type": "boolean"
        },
        {
            "name": "isMissed",
            "baseName": "isMissed",
            "type": "boolean"
        },
        {
            "name": "isMissedByVisitor",
            "baseName": "isMissedByVisitor",
            "type": "boolean"
        },
        {
            "name": "agentUserpic",
            "baseName": "agentUserpic",
            "type": "string"
        },
        {
            "name": "receivedFrom",
            "baseName": "receivedFrom",
            "type": "string"
        },
        {
            "name": "file",
            "baseName": "file",
            "type": "ConversationsMessageFile"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "ConversationsMessageFrom"
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "Array<ConversationsMessageToInner>"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "ConversationsMessageReplyTo"
        },
        {
            "name": "cc",
            "baseName": "cc",
            "type": "Array<ConversationsMessageToInner>"
        },
        {
            "name": "bcc",
            "baseName": "bcc",
            "type": "Array<ConversationsMessageToInner>"
        },
        {
            "name": "sourceMessageId",
            "baseName": "sourceMessageId",
            "type": "string"
        },
        {
            "name": "forwardedToSourceStatus",
            "baseName": "forwardedToSourceStatus",
            "type": "ConversationsMessageForwardedToSourceStatus"
        },
        {
            "name": "integrations",
            "baseName": "integrations",
            "type": "object"
        },
        {
            "name": "isBot",
            "baseName": "isBot",
            "type": "boolean"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<ConversationsMessageAttachmentsInner>"
        }    ];

    static getAttributeTypeMap() {
        return ConversationsMessage.attributeTypeMap;
    }
}

export namespace ConversationsMessage {
    export enum TypeEnum {
        Agent = <any> 'agent',
        Visitor = <any> 'visitor'
    }
}
